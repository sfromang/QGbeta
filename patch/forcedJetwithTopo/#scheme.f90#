!###########################################################
!###########################################################
!###########################################################
subroutine getUpdate
  use params
  use variables
  implicit none

  ! Compute streamfunction from Poisson equation & apply BC
  if (nlayers==1) then
     ! P.Williams BC (Dirichlet for pert + Neuman for m=0 pert)
     call poissonfft(q(:,:,1),psi(:,:,1),.false.,.false.,.false.,.true.) 
     psi(0,:,1)=psi(nx,:,1) ; psi(nx+1,:,1)=psi(1,:,1)
     psi(:,0,1)=sum(psi(1:nx,1,1))/nx ; psi(:,ny+1,1)=sum(psi(1:nx,ny,1))/nx
  else
     call getPsi
  endif
  !call computeBCzeroGrad(psi,nx,ny,nlayers)

  ! Compute velocities from streamfunction & timestep
  call getVel(psi+psibar,u,v)
  !dt=0.05*min(dx/maxval(abs(u)),dy/maxval(abs(v))) !cfl=0.05 (dt~0.03 for nx,ny=100,50)
  dt=2.e-3
  !dt=3.e-2
  !dt=0.5*min(dx/maxval(abs(u)),dy/maxval(abs(v)))
  !dt=min(dt,1.d3) ; dt=5.d2 !; dt=1.d-3

  ! Compute time derivative from velocities and vorticity
  call computeTimeDerivative(q+qbar,psi+psibar,u,v,dqdt)

  ! Add source term
  call source_term

  ! Compute q(t+dt) from q(t-dt) & dqdt using leapfrog scheme
  if (time>0.d0) then
     qp1=qm1+2.d0*dqdt*dt
  else
     qp1=qm1+dqdt*dt
  endif
  dqdt=0.d0

  !RAW filter
  call rawFilter

  qm1=q ; q=qp1 
  call computeBC(q,nx,ny,nlayers)

end subroutine getUpdate
!###########################################################
!###########################################################
!###########################################################
subroutine computeTimeDerivative(q,psi,u,v,dqdt)
  use params
  implicit none
  real(dp), dimension(0:nx+1,0:ny+1,1:nlayers), intent(in ) :: q,psi,u,v
  real(dp), dimension(0:nx+1,0:ny+1,1:nlayers), intent(out) :: dqdt
  real(dp) :: duqdx,dvqdy,betav,Jac
  integer :: i,j,im1,ip1,jm1,jp1,ilayer

  do ilayer=1,nlayers
     do j=1,ny
        !jm1=j-1 ; jp1=j+1
        do i=1,nx
           !im1=i-1 ; ip1=i+1
           !duqdx=(u(ip1,j  ,ilayer)*q(ip1,j  ,ilayer)-u(im1,j  ,ilayer)*q(im1,j  ,ilayer))/2.d0/dx
           !dvqdy=(v(i  ,jp1,ilayer)*q(i  ,jp1,ilayer)-v(i  ,jm1,ilayer)*q(i  ,jm1,ilayer))/2.d0/dy
           !betav = beta*v(i,j,ilayer)
           !dqdt(i,j,ilayer)=-duqdx-dvqdy-betav
           call computeArakawaJacobian(q,psi,i,j,ilayer,Jac)
           betav = beta*v(i,j,ilayer)
           dqdt(i,j,ilayer)=Jac-betav
        end do
     end do
  end do

  return
end subroutine computeTimeDerivative
!###########################################################
!###########################################################
!###########################################################
subroutine computeArakawaJacobian(q,psi,i,j,ilayer,Jac)
  use params
  implicit none
  integer :: i,j,ilayer
  real(dp), dimension(0:nx+1,0:ny+1,1:nlayers), intent(in ) :: q,psi
  real(dp) :: Jpp,Jpm,Jmp,Jac
  Jpp = (q(i+1,j,ilayer)-q(i-1,j,ilayer))*(psi(i,j+1,ilayer)-psi(i,j-1,ilayer)) - &
        (q(i,j+1,ilayer)-q(i,j-1,ilayer))*(psi(i+1,j,ilayer)-psi(i-1,j,ilayer))
  Jpm = - psi(i+1,j,ilayer)*(q(i+1,j+1,ilayer)-q(i+1,j-1,ilayer)) &
        + psi(i-1,j,ilayer)*(q(i-1,j+1,ilayer)-q(i-1,j-1,ilayer)) &
        + psi(i,j+1,ilayer)*(q(i+1,j+1,ilayer)-q(i-1,j+1,ilayer)) &
        - psi(i,j-1,ilayer)*(q(i+1,j-1,ilayer)-q(i-1,j-1,ilayer))
  Jmp = + q(i+1,j,ilayer)*(psi(i+1,j+1,ilayer)-psi(i+1,j-1,ilayer)) &
        - q(i-1,j,ilayer)*(psi(i-1,j+1,ilayer)-psi(i-1,j-1,ilayer)) &
        - q(i,j+1,ilayer)*(psi(i+1,j+1,ilayer)-psi(i-1,j+1,ilayer)) &
        + q(i,j-1,ilayer)*(psi(i+1,j-1,ilayer)-psi(i-1,j-1,ilayer))
  Jac=(Jpp+Jpm+Jmp)/12.d0/dx/dy !12 is 3*4
  return
end subroutine computeArakawaJacobian
!###########################################################
!###########################################################
!###########################################################
subroutine rawFilter
  use params
  use variables
  implicit none
  integer :: i,j,ilayer
  real(dp) :: d,alpha

  nu=0.2 ; alpha=0.53
  do ilayer=1,nlayers
     do j=1,ny
        do i=1,nx
           ! Compute filter displacement
           d = nu*(qm1(i,j,ilayer)-2.d0*q(i,j,ilayer)+qp1(i,j,ilayer))/2.d0
           ! Apply filter
           q  (i,j,ilayer) = q  (i,j,ilayer) + d*alpha
           qp1(i,j,ilayer) = qp1(i,j,ilayer) + d*(alpha-1.d0)
        end do
     end do
  end do

  return
end subroutine rawFilter
!###########################################################
!###########################################################
!###########################################################
subroutine getPsi
  use params
  use user_params
  use variables
  implicit none
  real(dp), dimension(0:nx+1,0:ny+1) :: q_s,q_d,psi_s,psi_d
  integer :: ilayer

  ! Compute solution of Poisson equation
  q_s=q(:,:,1)+q(:,:,2) ; q_d=q(:,:,1)-q(:,:,2)
  psi_s=psi(:,:,1)+psi(:,:,2) ; psi_d=psi(:,:,1)-psi(:,:,2)
  !call poisson(q_s,psi_s,.false.)
  !call poisson(q_d,psi_d,.true.)
  if (typeBC==1) then
     call poissonfft(q_s,psi_s,.false.,.true.,.false.,.false.)
     call poissonfft(q_d,psi_d,.true.,.true.,.false.,.false.)
  else if (typeBC==2) then
     call poissonfft(q_s,psi_s,.false.,.false.,.false.,.true.) 
     call poissonfft(q_d,psi_d,.true.,.false.,.false.,.true.) 
  endif
  psi(:,:,1)=half*(psi_s+psi_d)
  psi(:,:,2)=half*(psi_s-psi_d)
  if (typeBC==1) then
     psi(0,:,:)=psi(nx,:,:) ; psi(nx+1,:,:)=psi(1,:,:)
     psi(:,0,:)=psi(:,ny,:) ; psi(:,ny+1,:)=psi(:,1,:)
  else if (typeBC==2) then
     psi(0,:,:)=psi(nx,:,:) ; psi(nx+1,:,:)=psi(1,:,:)
     do ilayer=1,nlayers
        psi(:,0,ilayer)=sum(psi(1:nx,1,ilayer))/nx ; psi(:,ny+1,ilayer)=sum(psi(1:nx,ny,ilayer))/nx
     end do
  endif

  return
end subroutine getPsi
!###########################################################
!###########################################################
!###########################################################
subroutine getVel(psi,u,v)
  use params
  use user_params
  implicit none
  real(dp), dimension(0:nx+1,0:ny+1,1:nlayers), intent(in ) :: psi
  real(dp), dimension(0:nx+1,0:ny+1,1:nlayers), intent(out) :: u,v
  integer :: i,j,im1,ip1,jm1,jp1
  !random number parameters
  real(dp) :: rvalue,amp,sign

  do j=1,ny
     jm1=j-1 ; jp1=j+1
     do i=1,nx
        im1=i-1 ; ip1=i+1
        u(i,j,:)=-(psi(i  ,jp1,:)-psi(i  ,jm1,:))/2.d0/dy
        v(i,j,:)=+(psi(ip1,j  ,:)-psi(im1,j  ,:))/2.d0/dx
     end do
  end do
  ! ! Add noise
  ! do j=1,ny
  !    do i=1,nx
  !       call random_number(rvalue)
  !       u(i,j,1)=u(i,j,1)+2.d0*noiseAmp*(rvalue-5.d-1)
  !       call random_number(rvalue)
  !       v(i,j,1)=v(i,j,1)+2.d0*noiseAmp*(rvalue-5.d-1)
  !    end do
  ! end do
  ! BC conditions
  call computeBCzeroGrad(u,nx,ny,nlayers)
  call computeBC(v,nx,ny,nlayers)
  v(:,0,:)=0.d0 ; v(:,ny+1,:)=0.d0

  return
end subroutine getVel
!###########################################################
!###########################################################
!###########################################################
subroutine getQ(psi,q)
  use params
  implicit none
  real(dp), dimension(0:nx+1,0:ny+1,1:nlayers), intent(in ) :: psi
  real(dp), dimension(0:nx+1,0:ny+1,1:nlayers), intent(out) :: q
  integer :: i,j,im1,ip1,jm1,jp1

  q=0.d0
  do j=1,ny
     jm1=j-1 ; jp1=j+1
     do i=1,nx
        im1=i-1 ; ip1=i+1
        q(i,j,:)=(psi(ip1,j,:)-2.d0*psi(i,j,:)+psi(im1,j,:))/dx**2+\
                 (psi(i,jp1,:)-2.d0*psi(i,j,:)+psi(i,jm1,:))/dy**2
     end do
  end do
  if (nlayers == 2) then
     q(:,:,1)=q(:,:,1)-(psi(:,:,1)-psi(:,:,2))*LambdaInvSq        
     q(:,:,2)=q(:,:,2)+(psi(:,:,1)-psi(:,:,2))*LambdaInvSq
  endif

  return
end subroutine getQ
!###########################################################
!###########################################################
!###########################################################
subroutine getVorticity(psi,xi)
  use params
  implicit none
  real(dp), dimension(0:nx+1,0:ny+1), intent(in ) :: psi
  real(dp), dimension(0:nx+1,0:ny+1), intent(out) :: xi
  integer :: i,j,im1,ip1,jm1,jp1

  xi=0.d0
  do j=1,ny
     jm1=j-1 ; jp1=j+1
     do i=1,nx
        im1=i-1 ; ip1=i+1
        xi(i,j)=(psi(ip1,j)-2.d0*psi(i,j)+psi(im1,j))/dx**2+\
                (psi(i,jp1)-2.d0*psi(i,j)+psi(i,jm1))/dy**2
     end do
  end do

  return
end subroutine getVorticity
!###########################################################
!###########################################################
!###########################################################
subroutine getDelSq(phi,delSqPhi)
  use params
  implicit none
  real(dp), dimension(0:nx+1,0:ny+1,nlayers), intent(in ) :: phi
  real(dp), dimension(0:nx+1,0:ny+1,nlayers), intent(out) :: delSqPhi
  integer :: i,j,im1,ip1,jm1,jp1

  delSqPhi=0.d0
  do j=1,ny
     jm1=j-1 ; jp1=j+1
     do i=1,nx
        im1=i-1 ; ip1=i+1
        delSqPhi(i,j,:)=(phi(ip1,j  ,:)-2.d0*phi(i,j,:)+phi(im1,j,:))/dx**2+\
                        (phi(i  ,jp1,:)-2.d0*phi(i,j,:)+phi(i,jm1,:))/dy**2
     end do
  end do

  return
end subroutine getDelSq
